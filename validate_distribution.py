#!/usr/bin/env python3
"""
Script de validaci√≥n pre-distribuci√≥n para ALENIA GESTION-KONTROL+ v2.3
Verifica que todo est√© listo para distribuci√≥n comercial
"""

import os
import sys
import json
import subprocess
from pathlib import Path
import hashlib
from PIL import Image
import ast

class DistributionValidator:
    def __init__(self):
        self.root_dir = Path.cwd()
        self.errors = []
        self.warnings = []
        self.checks_passed = 0
        self.total_checks = 0
        
    def log_error(self, message):
        """Registrar error cr√≠tico"""
        self.errors.append(f"‚ùå ERROR: {message}")
        print(f"‚ùå ERROR: {message} - validate_distribution.py:27")
        
    def log_warning(self, message):
        """Registrar advertencia"""
        self.warnings.append(f"‚ö†Ô∏è  WARNING: {message}")
        print(f"‚ö†Ô∏è  WARNING: {message} - validate_distribution.py:32")
        
    def log_success(self, message):
        """Registrar √©xito"""
        print(f"‚úÖ {message} - validate_distribution.py:36")
        self.checks_passed += 1
        
    def check_required_files(self):
        """Verificar archivos requeridos para distribuci√≥n"""
        print("üîç Verificando archivos requeridos... - validate_distribution.py:41")
        self.total_checks += 1
        
        required_files = {
            # C√≥digo fuente
            "main.py": "Archivo principal de la aplicaci√≥n",
            "auth.py": "Sistema de autenticaci√≥n", 
            "session_manager.py": "Gesti√≥n de sesiones",
            
            # Assets visuales
            "7.png": "Logo principal",
            "LOGO APP.png": "Logo alternativo",
            
            # Documentaci√≥n
            "README.md": "Documentaci√≥n principal",
            "MANUAL_DISTRIBUCION.md": "Manual de distribuci√≥n",
            "modelo_productos.csv": "Plantilla CSV",
            
            # Scripts de construcci√≥n
            "build_distribution.py": "Script de construcci√≥n",
            "optimize_main.py": "Optimizador de c√≥digo",
        }
        
        missing_files = []
        for file_path, description in required_files.items():
            if not (self.root_dir / file_path).exists():
                missing_files.append(f"{file_path} ({description})")
                
        if missing_files:
            self.log_error(f"Archivos faltantes: {', '.join(missing_files)}")
            return False
        else:
            self.log_success("Todos los archivos requeridos est√°n presentes")
            return True
            
    def check_code_syntax(self):
        """Verificar sintaxis del c√≥digo Python"""
        print("üêç Verificando sintaxis del c√≥digo... - validate_distribution.py:78")
        self.total_checks += 1
        
        python_files = ["main.py", "auth.py", "session_manager.py"]
        syntax_errors = []
        
        for file_name in python_files:
            file_path = self.root_dir / file_name
            if file_path.exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    ast.parse(content)
                except SyntaxError as e:
                    syntax_errors.append(f"{file_name}: {e}")
                    
        if syntax_errors:
            self.log_error(f"Errores de sintaxis: {'; '.join(syntax_errors)}")
            return False
        else:
            self.log_success("Sintaxis de c√≥digo verificada")
            return True
            
    def check_dependencies(self):
        """Verificar dependencias de Python"""
        print("üì¶ Verificando dependencias... - validate_distribution.py:103")
        self.total_checks += 1
        
        required_packages = [
            ("PIL", "Pillow"),
            ("tkinter", "tkinter (incluido en Python)"),
            ("json", "json (incluido en Python)"),
            ("datetime", "datetime (incluido en Python)")
        ]
        
        missing_deps = []
        for module_name, package_name in required_packages:
            try:
                __import__(module_name)
            except ImportError:
                missing_deps.append(package_name)
                
        if missing_deps:
            self.log_error(f"Dependencias faltantes: {', '.join(missing_deps)}")
            return False
        else:
            self.log_success("Todas las dependencias est√°n disponibles")
            return True
            
    def check_images(self):
        """Verificar integridad de im√°genes"""
        print("üñºÔ∏è  Verificando integridad de im√°genes... - validate_distribution.py:129")
        self.total_checks += 1
        
        # Im√°genes en directorio ra√≠z
        image_files = [
            ("7.png", self.root_dir / "7.png"),
            ("LOGO APP.png", self.root_dir / "LOGO APP.png"), 
            ("ALENRESULTADOS.png", self.root_dir / "ALENRESULTADOS.png")
        ]
        
        # Imagen en carpeta screenshot
        logonombre_path = self.root_dir / "screenshot" / "LOGONOMBRE.png"
        if logonombre_path.exists():
            image_files.append(("LOGONOMBRE.png", logonombre_path))
            
        corrupted_images = []
        for image_name, image_path in image_files:
            if image_path.exists():
                try:
                    with Image.open(image_path) as img:
                        img.verify()  # Verificar integridad
                        # Reabrir para verificar tama√±o
                        with Image.open(image_path) as img2:
                            width, height = img2.size
                            if width < 10 or height < 10:
                                corrupted_images.append(f"{image_name} (tama√±o inv√°lido: {width}x{height})")
                except Exception as e:
                    corrupted_images.append(f"{image_name} ({str(e)})")
            else:
                self.log_warning(f"Imagen opcional no encontrada: {image_name}")
                
        if corrupted_images:
            self.log_error(f"Im√°genes corruptas: {', '.join(corrupted_images)}")
            return False
        else:
            self.log_success("Integridad de im√°genes verificada")
            return True
            
    def check_pyinstaller(self):
        """Verificar instalaci√≥n de PyInstaller"""
        print("üî® Verificando PyInstaller... - validate_distribution.py:169")
        self.total_checks += 1
        
        try:
            result = subprocess.run(["pyinstaller", "--version"], 
                                  capture_output=True, text=True, check=True)
            version = result.stdout.strip()
            self.log_success(f"PyInstaller {version} instalado")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.log_error("PyInstaller no est√° instalado o no funciona correctamente")
            return False
            
    def check_documentation(self):
        """Verificar completitud de documentaci√≥n"""
        print("üìö Verificando documentaci√≥n... - validate_distribution.py:184")
        self.total_checks += 1
        
        doc_checks = []
        
        # Verificar README.md
        readme_path = self.root_dir / "README.md"
        if readme_path.exists():
            with open(readme_path, 'r', encoding='utf-8') as f:
                readme_content = f.read()
            
            required_sections = [
                "Descripci√≥n", "Caracter√≠sticas", "Instalaci√≥n", 
                "Requisitos", "Contacto"
            ]
            
            missing_sections = []
            for section in required_sections:
                if section.lower() not in readme_content.lower():
                    missing_sections.append(section)
                    
            if missing_sections:
                doc_checks.append(f"README.md: secciones faltantes ({', '.join(missing_sections)})")
        else:
            doc_checks.append("README.md no encontrado")
            
        # Verificar archivos HTML
        html_files = ["GUIA_USUARIO_COMPLETA.html", "GUIA_VISUAL_USUARIO.html"]
        for html_file in html_files:
            html_path = self.root_dir / html_file
            if not html_path.exists():
                doc_checks.append(f"{html_file} no encontrado")
                
        if doc_checks:
            self.log_warning(f"Problemas en documentaci√≥n: {'; '.join(doc_checks)}")
            return False
        else:
            self.log_success("Documentaci√≥n completa y v√°lida")
            return True
            
    def check_csv_template(self):
        """Verificar plantilla CSV"""
        print("üìä Verificando plantilla CSV... - validate_distribution.py:226")
        self.total_checks += 1
        
        csv_path = self.root_dir / "modelo_productos.csv"
        if not csv_path.exists():
            self.log_error("modelo_productos.csv no encontrado")
            return False
            
        try:
            with open(csv_path, 'r', encoding='utf-8') as f:
                first_line = f.readline().strip()
                
            # Verificar que tenga las columnas esperadas (flexibilidad en nombres)
            expected_mappings = {
                "marca": ["marca", "marca/proveedor", "proveedor"],
                "descripcion": ["descripcion", "descripci√≥n", "producto"],
                "color": ["color", "color/sabor", "sabor"],
                "talle": ["talle", "talle/tama√±o", "tama√±o", "size"],
                "cantidad": ["cantidad", "stock", "qty"],
                "precio_costo": ["precio_costo", "costo", "precio", "cost"]
            }
            
            columns = [col.strip().lower() for col in first_line.split(',')]
            
            missing_columns = []
            for expected_col, possible_names in expected_mappings.items():
                found = any(possible_name in columns for possible_name in possible_names)
                if not found:
                    missing_columns.append(expected_col)
                    
            if missing_columns:
                self.log_error(f"Columnas faltantes en CSV: {', '.join(missing_columns)}")
                return False
            else:
                self.log_success("Plantilla CSV v√°lida")
                return True
                
        except Exception as e:
            self.log_error(f"Error leyendo CSV: {e}")
            return False
            
    def check_version_consistency(self):
        """Verificar consistencia de versiones"""
        print("üè∑Ô∏è  Verificando consistencia de versiones... - validate_distribution.py:269")
        self.total_checks += 1
        
        version_files = {
            "README.md": r"v(\d+\.\d+)",
            "RELEASE_NOTES_v2.3.md": r"v(\d+\.\d+)",
            "build_distribution.py": r'VERSION = "(\d+\.\d+\.\d+)"'
        }
        
        versions_found = {}
        for file_name, pattern in version_files.items():
            file_path = self.root_dir / file_name
            if file_path.exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    import re
                    match = re.search(pattern, content)
                    if match:
                        versions_found[file_name] = match.group(1)
                except Exception as e:
                    self.log_warning(f"Error leyendo versi√≥n de {file_name}: {e}")
                    
        # Verificar consistencia
        if len(set(versions_found.values())) > 1:
            self.log_warning(f"Versiones inconsistentes: {versions_found}")
            return False
        else:
            version = list(versions_found.values())[0] if versions_found else "desconocida"
            self.log_success(f"Versi√≥n consistente: {version}")
            return True
            
    def check_disk_space(self):
        """Verificar espacio en disco suficiente"""
        print("üíæ Verificando espacio en disco... - validate_distribution.py:304")
        self.total_checks += 1
        
        try:
            # Obtener espacio libre (Windows)
            if os.name == 'nt':
                import shutil
                free_bytes = shutil.disk_usage(self.root_dir).free
                free_gb = free_bytes / (1024**3)
                
                if free_gb < 2:  # M√≠nimo 2GB para el proceso de build
                    self.log_error(f"Espacio insuficiente: {free_gb:.1f}GB (m√≠nimo: 2GB)")
                    return False
                else:
                    self.log_success(f"Espacio en disco suficiente: {free_gb:.1f}GB")
                    return True
            else:
                self.log_warning("Verificaci√≥n de espacio no disponible en este sistema")
                return True
                
        except Exception as e:
            self.log_warning(f"Error verificando espacio en disco: {e}")
            return True
            
    def generate_pre_build_report(self):
        """Generar reporte pre-build"""
        print("üìã Generando reporte de validaci√≥n... - validate_distribution.py:330")
        
        report_content = f"""# üìã REPORTE DE VALIDACI√ìN PRE-DISTRIBUCI√ìN
## ALENIA GESTION-KONTROL+ v2.3

**Fecha:** {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Sistema:** {os.name} - {sys.platform}
**Python:** {sys.version.split()[0]}

## üìä RESUMEN
- **Checks ejecutados:** {self.total_checks}
- **Checks exitosos:** {self.checks_passed}
- **Errores cr√≠ticos:** {len(self.errors)}
- **Advertencias:** {len(self.warnings)}
- **Estado:** {'‚úÖ LISTO PARA DISTRIBUCI√ìN' if len(self.errors) == 0 else '‚ùå REQUIERE CORRECCIONES'}

## ‚ùå ERRORES CR√çTICOS
"""
        
        if self.errors:
            for error in self.errors:
                report_content += f"\n{error}"
        else:
            report_content += "\n‚úÖ Sin errores cr√≠ticos"
            
        report_content += "\n\n## ‚ö†Ô∏è ADVERTENCIAS\n"
        
        if self.warnings:
            for warning in self.warnings:
                report_content += f"\n{warning}"
        else:
            report_content += "\n‚úÖ Sin advertencias"
            
        report_content += f"""

## üéØ PR√ìXIMOS PASOS

{'‚úÖ **LISTO PARA DISTRIBUCI√ìN**' if len(self.errors) == 0 else '‚ùå **CORREGIR ERRORES ANTES DE CONTINUAR**'}

1. {'Ejecutar build_distribution.py' if len(self.errors) == 0 else 'Corregir errores listados arriba'}
2. {'Testear ejecutable generado' if len(self.errors) == 0 else 'Re-ejecutar validate_distribution.py'}
3. {'Distribuir paquete final' if len(self.errors) == 0 else 'Continuar con build cuando est√© todo OK'}

## üìû SOPORTE
Para consultas sobre este reporte: alenia.online@gmail.com

---
¬© 2025 ALENIA - Reporte generado autom√°ticamente
"""
        
        # Guardar reporte
        report_path = self.root_dir / "VALIDATION_REPORT.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
            
        print(f"üìÑ Reporte guardado en: {report_path} - validate_distribution.py:385")
        return report_path
        
    def run_validation(self):
        """Ejecutar validaci√≥n completa"""
        print("üöÄ INICIANDO VALIDACI√ìN PREDISTRIBUCI√ìN - validate_distribution.py:390")
        print("= - validate_distribution.py:391" * 60)
        
        # Ejecutar todos los checks
        validation_methods = [
            self.check_required_files,
            self.check_code_syntax,
            self.check_dependencies,
            self.check_images,
            self.check_pyinstaller,
            self.check_documentation,
            self.check_csv_template,
            self.check_version_consistency,
            self.check_disk_space
        ]
        
        for method in validation_methods:
            try:
                method()
            except Exception as e:
                self.log_error(f"Error en {method.__name__}: {e}")
            print()  # L√≠nea en blanco entre checks
            
        # Generar reporte
        report_path = self.generate_pre_build_report()
        
        # Resumen final
        print("= - validate_distribution.py:417" * 60)
        if len(self.errors) == 0:
            print("üéâ VALIDACI√ìN EXITOSA  LISTO PARA DISTRIBUCI√ìN - validate_distribution.py:419")
            print(f"‚úÖ {self.checks_passed}/{self.total_checks} checks pasaron - validate_distribution.py:420")
            if self.warnings:
                print(f"‚ö†Ô∏è  {len(self.warnings)} advertencias (no cr√≠ticas) - validate_distribution.py:422")
            print("\nüöÄ Pr√≥ximo paso: Ejecutar build_distribution.py - validate_distribution.py:423")
        else:
            print("‚ùå VALIDACI√ìN FALL√ì  REQUIERE CORRECCIONES - validate_distribution.py:425")
            print(f"‚ùå {len(self.errors)} errores cr√≠ticos encontrados - validate_distribution.py:426")
            print(f"‚ö†Ô∏è  {len(self.warnings)} advertencias - validate_distribution.py:427")
            print("\nüîß Corregir errores antes de continuar con la distribuci√≥n - validate_distribution.py:428")
            
        print(f"üìã Reporte detallado: {report_path} - validate_distribution.py:430")
        
        return len(self.errors) == 0

def main():
    validator = DistributionValidator()
    success = validator.run_validation()
    
    input(f"\n{'‚úÖ VALIDACI√ìN EXITOSA' if success else '‚ùå VALIDACI√ìN FALL√ì'} - Presiona Enter para continuar...")
    return success

if __name__ == "__main__":
    main()