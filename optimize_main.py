#!/usr/bin/env python3
"""
Script de optimizaci√≥n para main.py antes de la distribuci√≥n
Completa m√©todos stub y optimiza el c√≥digo para producci√≥n
"""

import re
import ast
from pathlib import Path

class MainOptimizer:
    def __init__(self, main_file_path="main.py"):
        self.main_file = Path(main_file_path)
        self.optimized_file = Path("main_optimized.py")
        
    def read_main_file(self):
        """Leer el archivo main.py"""
        with open(self.main_file, 'r', encoding='utf-8') as f:
            return f.read()
            
    def find_stub_methods(self, content):
        """Encontrar m√©todos stub que necesitan implementaci√≥n"""
        # Patrones para encontrar m√©todos vac√≠os o con solo pass/...
        stub_patterns = [
            r'def\s+(\w+)\s*\([^)]*\):\s*\n\s*(pass|\.\.\.|\s*$)',
            r'def\s+(\w+)\s*\([^)]*\):\s*\n\s*"""[^"]*"""\s*\n\s*(pass|\.\.\.|\s*$)',
            r'def\s+(\w+)\s*\([^)]*\):\s*\n\s*#[^\n]*\n\s*(pass|\.\.\.|\s*$)'
        ]
        
        stub_methods = []
        for pattern in stub_patterns:
            matches = re.finditer(pattern, content, re.MULTILINE)
            for match in matches:
                method_name = match.group(1)
                if method_name not in [m[0] for m in stub_methods]:
                    stub_methods.append((method_name, match.start(), match.end()))
                    
        return stub_methods
        
    def complete_stub_methods(self, content):
        """Completar m√©todos stub con implementaciones b√°sicas"""
        print("üîß Completando m√©todos stub...")
        
        # Implementaciones para m√©todos comunes
        implementations = {
            "on_enter": """    def on_enter(self, e):
        \"\"\"Efecto hover al entrar\"\"\"
        try:
            e.widget.config(bg=color_hover)
        except:
            pass""",
            
            "on_leave": """    def on_leave(self, e):
        \"\"\"Efecto hover al salir\"\"\"
        try:
            e.widget.config(bg=color_normal)
        except:
            pass""",
            
            "_get_resample_filter": """    def _get_resample_filter(self):
        \"\"\"Obtener filtro de resampling compatible\"\"\"
        try:
            from PIL import Image
            return getattr(Image, 'LANCZOS', Image.ANTIALIAS)
        except:
            return 1""",
            
            "mostrar_inventario": """    def mostrar_inventario(self):
        \"\"\"Mostrar pantalla de inventario\"\"\"
        self.limpiar_pantalla()
        self._colocar_logo(pantalla_principal=False)
        self._chip_volver(self.mostrar_menu_principal)
        self._pantalla_inventario(self.canvas_bg)""",
            
            "limpiar_pantalla": """    def limpiar_pantalla(self):
        \"\"\"Limpiar todos los widgets de la pantalla\"\"\"
        if hasattr(self, 'pantalla_widgets'):
            for widget in self.pantalla_widgets:
                try:
                    widget.destroy()
                except:
                    pass
            self.pantalla_widgets.clear()
        else:
            self.pantalla_widgets = []""",
            
            "mostrar_menu_principal": """    def mostrar_menu_principal(self):
        \"\"\"Mostrar men√∫ principal\"\"\"
        self.limpiar_pantalla()
        self._colocar_logo(pantalla_principal=True)
        self.crear_widgets()""",
            
            "mostrar_menu_secundario": """    def mostrar_menu_secundario(self):
        \"\"\"Mostrar men√∫ secundario de gesti√≥n\"\"\"
        self.limpiar_pantalla()
        self._colocar_logo(pantalla_principal=False)
        self._chip_volver(self.mostrar_menu_principal)
        # Crear botones del men√∫ secundario aqu√≠
        pass""",
        }
        
        # Buscar m√©todos stub y reemplazarlos
        for method_name, start, end in self.find_stub_methods(content):
            if method_name in implementations:
                # Reemplazar implementaci√≥n stub
                before = content[:start]
                after = content[end:]
                content = before + implementations[method_name] + after
                print(f"  ‚úÖ Completado: {method_name}")
            else:
                print(f"  ‚ö†Ô∏è  Sin implementaci√≥n para: {method_name}")
                
        return content
        
    def add_missing_imports(self, content):
        """Agregar imports faltantes"""
        print("üì¶ Verificando imports...")
        
        required_imports = [
            "import tkinter as tk",
            "import tkinter.font as tkfont",
            "from tkinter import messagebox, filedialog",
            "import os",
            "import sys", 
            "import json",
            "import csv",
            "import datetime",
            "import uuid",
            "from pathlib import Path",
            "from PIL import Image, ImageTk"
        ]
        
        # Verificar qu√© imports faltan
        missing_imports = []
        for imp in required_imports:
            if imp not in content:
                missing_imports.append(imp)
                
        if missing_imports:
            # Agregar imports al inicio del archivo
            import_section = "\n".join(missing_imports) + "\n\n"
            
            # Encontrar donde insertar los imports (despu√©s del docstring si existe)
            if '"""' in content[:500]:
                # Hay docstring, insertar despu√©s
                end_docstring = content.find('"""', content.find('"""') + 3) + 3
                content = content[:end_docstring] + "\n\n" + import_section + content[end_docstring:]
            else:
                # No hay docstring, insertar al inicio
                content = import_section + content
                
            print(f"  ‚úÖ Agregados {len(missing_imports)} imports faltantes")
            
        return content
        
    def optimize_code_structure(self, content):
        """Optimizar estructura del c√≥digo"""
        print("‚ö° Optimizando estructura del c√≥digo...")
        
        # Eliminar l√≠neas de debug innecesarias para producci√≥n
        debug_patterns = [
            r'print\(f?"\[DEBUG\][^"]*"\)',
            r'print\(f?"[^"]*DEBUG[^"]*"\)',
        ]
        
        for pattern in debug_patterns:
            content = re.sub(pattern, '# Debug removed for production', content, flags=re.MULTILINE)
            
        # Optimizar imports duplicados
        import_lines = []
        other_lines = []
        in_imports = True
        
        for line in content.split('\n'):
            if line.strip().startswith(('import ', 'from ')) and in_imports:
                if line not in import_lines:
                    import_lines.append(line)
            else:
                if line.strip() and not line.startswith('#'):
                    in_imports = False
                other_lines.append(line)
                
        # Reorganizar imports
        organized_imports = sorted(set(import_lines))
        content = '\n'.join(organized_imports) + '\n\n' + '\n'.join(other_lines)
        
        print("  ‚úÖ C√≥digo optimizado")
        return content
        
    def add_production_config(self, content):
        """Agregar configuraci√≥n para producci√≥n"""
        print("üè≠ Agregando configuraci√≥n de producci√≥n...")
        
        # Configuraci√≥n para ejecutable empaquetado
        production_config = '''
# ============================================================================
# CONFIGURACI√ìN PARA PRODUCCI√ìN - AUTO GENERADO
# ============================================================================

import sys
import os
from pathlib import Path

# Detectar si estamos ejecutando desde PyInstaller
if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
    # Ejecut√°ndose como ejecutable
    RUNNING_AS_EXE = True
    BASE_PATH = Path(sys._MEIPASS)
    DATA_PATH = Path(sys.executable).parent
else:
    # Ejecut√°ndose como script
    RUNNING_AS_EXE = False
    BASE_PATH = Path(__file__).parent
    DATA_PATH = BASE_PATH

# Rutas de archivos de datos
PRODUCTOS_FILE = DATA_PATH / "productos.json"
VENTAS_FILE = DATA_PATH / "ventas.json"
GASTOS_FILE = DATA_PATH / "gastos.json"
USUARIOS_FILE = DATA_PATH / "usuarios.json"

# Funci√≥n para obtener ruta de recursos
def get_resource_path(relative_path):
    """Obtener ruta absoluta a recurso, compatible con PyInstaller"""
    try:
        if RUNNING_AS_EXE:
            return BASE_PATH / relative_path
        else:
            return BASE_PATH / relative_path
    except Exception:
        return Path(relative_path)

# Configurar logging para producci√≥n
import logging
logging.basicConfig(
    level=logging.WARNING,  # Solo warnings y errores en producci√≥n
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(DATA_PATH / 'kontrol.log'),
        logging.StreamHandler()
    ]
)

'''
        
        # Insertar configuraci√≥n despu√©s de los imports
        import_end = content.find('\n\n# Paleta moderna')
        if import_end == -1:
            import_end = content.find('\n\nCOLOR_GRADIENTE_1')
            
        if import_end != -1:
            content = content[:import_end] + production_config + content[import_end:]
        else:
            content = production_config + content
            
        print("  ‚úÖ Configuraci√≥n de producci√≥n agregada")
        return content
        
    def optimize_main(self):
        """Proceso completo de optimizaci√≥n"""
        print("üöÄ Iniciando optimizaci√≥n de main.py para distribuci√≥n")
        print("=" * 60)
        
        try:
            # Leer archivo original
            content = self.read_main_file()
            print(f"üìñ Archivo original le√≠do: {len(content)} caracteres")
            
            # Aplicar optimizaciones
            content = self.add_missing_imports(content)
            content = self.complete_stub_methods(content)
            content = self.add_production_config(content)
            content = self.optimize_code_structure(content)
            
            # Escribir archivo optimizado
            with open(self.optimized_file, 'w', encoding='utf-8') as f:
                f.write(content)
                
            print(f"üíæ Archivo optimizado guardado: {self.optimized_file}")
            print(f"üìä Tama√±o final: {len(content)} caracteres")
            
            # Verificar sintaxis
            try:
                ast.parse(content)
                print("‚úÖ Sintaxis verificada correctamente")
            except SyntaxError as e:
                print(f"‚ùå Error de sintaxis: {e}")
                return False
                
            print("\nüéâ Optimizaci√≥n completada exitosamente")
            return True
            
        except Exception as e:
            print(f"‚ùå Error durante la optimizaci√≥n: {e}")
            return False

def main():
    optimizer = MainOptimizer()
    success = optimizer.optimize_main()
    
    if success:
        print("\n‚úÖ main.py optimizado para distribuci√≥n")
        print("üìù Usa main_optimized.py para el build final")
    else:
        print("\n‚ùå Error en la optimizaci√≥n")
        
    input("\nPresiona Enter para continuar...")
    return success

if __name__ == "__main__":
    main()